#!/usr/bin/env bash

# Requires
# - pyenv
# - python
# - virtualenv

# Exit on errors
set -o errexit
set -o nounset
set -o pipefail

# foreground colors
printf -v red '\e[31m'
printf -v green '\e[32m'
printf -v yellow '\e[33m'
printf -v normal '\e[0m'
readonly red green yellow normal

readonly default_venv=.venv
readonly program=${0##*/}

function error() {
    >&2 echo "$program: ${red}error${normal}: $*"
}

function warning() {
    >&2 echo "$program: ${yellow}warning${normal}: $*"
}

function die() {
    error "$@"
    exit 1
}

function usage() {
    cat << EOF
usage: ${program} [-h | venv]

Easily create virtual enviroments using \`virtualenv\` and \`pyenv\`.

positional arguments:
  venv   name for the virtual enviroment (default: ${default_venv})

options:
  -h, --help  show this help message and exit
EOF
}

# https://stackoverflow.com/a/3352015/22197708
function trim() {
    local var="$1"
    var="${var#"${var%%[![:space:]]*}"}" # leading whitespace
    var="${var%"${var##*[![:space:]]}"}" # trailing whitespace
    printf '%s' "$var"
}

function mkvenv() {
    local venv=$1 prompt version

    [[ -e $venv ]] && die "venv '$venv' already exists"

    prompt="\[$green\]$venv\[$normal\]"

    if ! command -v virtualenv > /dev/null; then
        # shellcheck disable=SC2016
        warning 'virtualenv not found, using `python -m venv`'
        python -m venv "$venv" --prompt "$prompt" --copies --upgrade-deps
        return
    fi

    if ! command -v pyenv > /dev/null || ! pyenv local &> /dev/null; then
        warning 'python version not set with pyenv'
        virtualenv "$venv" --prompt "$prompt" --copies --download
        return
    fi

    version=$(pyenv version-name)
    virtualenv "$venv" --python "$version" --prompt "$prompt" --copies --download
}

function main() {
    local venv
    if [[ $# -eq 0 ]]; then
        mkvenv "$default_venv"
    elif [[ $# -eq 1 ]]; then
        case "$1" in
            -h | --help)
                usage
                exit 0
                ;;
            -*)
                error "unrecognized argument: $1"
                exit 1
                ;;
            *)
                venv=$(trim "$1")
                [[ -z $venv ]] && die 'empty venv name'
                mkvenv "$venv"
                ;;
        esac
    else
        error 'too many arguments'
        exit 1
    fi
}

main "$@"
