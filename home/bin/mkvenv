#!/usr/bin/env bash

# Requires
# - pyenv
# - python
# - virtualenv

# shellcheck disable=SC2155

# Exit on errors
set -o errexit
set -o nounset
set -o pipefail

readonly default_venv=.venv
readonly program=${0##*/}

# ansi scape codes
readonly green=$(tput setaf 2)
readonly yellow=$(tput setaf 3)
readonly normal=$(tput sgr0)

function error() {
    >&2 echo "$program: $*"
}

function die() {
    error "$@"
    exit 1
}

function usage() {
    cat <<EOF
usage: ${program} [-h | venv]

Easily create virtual enviroments using \`virtualenv\` and \`pyenv\`.

positional arguments:
  venv   name for the virtual enviroment (default: ${default_venv})

options:
  -h, --help  show this help message and exit
EOF
}

# https://stackoverflow.com/a/3352015/22197708
function trim() {
    local var="$1"
    var="${var#"${var%%[![:space:]]*}"}" # leading whitespace
    var="${var%"${var##*[![:space:]]}"}" # trailing whitespace
    printf '%s' "$var"
}

function mkvenv() {
    local venv=$1 prompt version

    [[ -f $venv ]] && die "venv '$venv' already exists"

    # green prompt
    prompt="\[$green\]$venv\[$normal\]"

    if ! command -v virtualenv > /dev/null; then
        python -m venv "$venv" --prompt "$prompt" --copies --upgrade-deps
        return
    fi

    if ! command -v pyenv > /dev/null || ! pyenv local &> /dev/null; then
        error "${yellow}WARNING${normal}: python version not set with pyenv"
        virtualenv "$venv" --prompt "$prompt" --copies --download
        return
    fi

    version=$(pyenv version-name)
    virtualenv "$venv" --python "$version" --prompt "$prompt" --copies --download
}

function main() {
    if [[ $# -eq 0 ]]; then
        mkvenv "$default_venv"
    elif [[ $# -eq 1 ]]; then
        case "$1" in
            -h | --help)
                usage
                exit 0
                ;;
            *)
                local venv=$(trim "$1")
                [[ -z $venv ]] && die 'empty venv name'
                mkvenv "$venv"
                ;;
        esac
    else
        error 'too many arguments'
        usage
        exit 1
    fi
}

main "$@"
