#!/usr/bin/python3

import re
import subprocess
import sys

ENABLED = '1'
DISABLED = '0'

state_string = {
    ENABLED: 'enable',
    DISABLED: 'disable',
}


def show_message(message: str, error: bool = False) -> None:
    if sys.stdout.isatty():
        print(message, file=sys.stderr if error else None)
    else:
        urgency = 'critical' if error else 'low'
        subprocess.run(['notify-send', '--urgency', urgency, 'Touchpad', message])


def get_device_id(pattern: str) -> str | None:
    libinput_devices = subprocess.run(['xinput', 'list'], capture_output=True, encoding='utf-8')
    c_pattern = re.compile(pattern)

    for line in libinput_devices.stdout.splitlines():
        if not c_pattern.search(line):
            continue
        device_id = re.search(r'id=(\d+)', line)
        assert device_id
        return device_id[1]


def get_property_state(device: str, property_name: str) -> str | None:
    process = subprocess.run(['xinput', 'list-props', device], capture_output=True, encoding='utf-8')
    properties = (prop.split(':', maxsplit=1) for prop in process.stdout.splitlines()[1:])
    properties = ((prop.split('(')[0].strip(), value.strip()) for prop, value in properties)

    for property, value in properties:
        if property_name != property:
            continue
        return value


def set_property_state(device: str, property: str, setting: str) -> None:
    subprocess.run(['xinput', 'set-prop', device, property, setting])


def main() -> int:
    device = 'Touchpad'
    property = 'libinput Tapping Enabled'

    device_id = get_device_id(device)
    if device_id is None:
        show_message(f'Device matching pattern {device!r} not found', error=True)
        return 1

    state = get_property_state(device_id, property)
    if state is None:
        show_message(f'Property {property!r} for device {device}({device_id}) not found', error=True)
        return 1

    if state not in {ENABLED, DISABLED}:
        show_message(f'Unexpected state {state!r} for {property!r}', error=True)
        return 1

    new_state = ENABLED if state == DISABLED else DISABLED
    set_property_state(device_id, property, new_state)
    show_message(f'Tapping {state_string[new_state]}')
    return 0


if __name__ == '__main__':
    sys.exit(main())
