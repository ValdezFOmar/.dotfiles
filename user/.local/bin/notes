#!/usr/bin/env python

import argparse
import os
import shutil
import sqlite3
import sys
from collections.abc import Iterable
from typing import NamedTuple

XDG_DATA_HOME = os.getenv('XDG_DATA_HOME', os.path.expanduser('~/.local/share'))


class Note(NamedTuple):
    id: int
    content: str


class NotesManager:
    def __init__(self, datadir: str) -> None:
        self._datadir = os.path.join(datadir, 'py-notes')
        os.makedirs(self._datadir, exist_ok=True)
        self._database = os.path.join(self._datadir, 'db.sqlite')
        self.connection = sqlite3.connect(self._database)
        self._set_note_table()

    def _set_note_table(self) -> None:
        table_exist = self.connection.execute(
            "SELECT * FROM sqlite_schema WHERE type='table' AND name='note'"
        ).fetchone()
        if table_exist:
            return
        with self.connection:
            self.connection.execute('CREATE TABLE note(id INTEGER PRIMARY KEY, content TEXT)')

    def __enter__(self):
        return self

    def __exit__(self, *_):
        self.connection.close()

    def add_note(self, note: str) -> bool:
        """Adds a note and returns a `bool` indicating if the note was added."""
        note = note.strip()
        if not note:
            return False
        with self.connection:
            self.connection.execute('INSERT INTO note(content) VALUES(?)', [note])
            return True

    def migrate_file(self, name: str) -> int:
        """
        Add notes from a text file, taking each line as a note.
        Returns the number of notes added.
        """
        with open(name, 'r') as file:
            return sum(self.add_note(line) for line in file)

    def get_last_notes(self, number: int) -> list[Note]:
        cursor = self.connection.cursor()
        cursor.execute('SELECT id, content FROM note ORDER BY id DESC')
        return [Note(*note) for note in cursor.fetchmany(number)]

    def get_all_notes(self) -> list[Note]:
        cursor = self.connection.cursor()
        cursor.execute('SELECT id, content FROM note ORDER BY id DESC')
        return [Note(*note) for note in cursor.fetchall()]

    def get_note_by_id(self, id: int) -> Note | None:
        cursor = self.connection.cursor()
        cursor.execute('SELECT id, content FROM note WHERE id = ?', [id])
        note = cursor.fetchone()
        return Note(*note) if note else None

    def remove_note(self, id: int):
        with self.connection:
            self.connection.execute('DELETE FROM note WHERE id = ?', [id])
        assert self.get_note_by_id(id) is None


def print_notes(notes: Iterable[Note], show_id: bool = False, full: bool = False) -> None:
    term_width = shutil.get_terminal_size((sys.maxsize, 0)).columns
    for note in notes:
        line = f'{note.id}: {note.content}' if show_id else note.content
        if not full and len(line) > term_width:
            line = line[: term_width - 3] + '...'
        print(line)


def delete_note(notes_manager: NotesManager, id: int) -> int:
    """Interactively remove a note. The special value of -1 removes the last added note."""
    if id == -1:
        notes = notes_manager.get_last_notes(1)
        note = notes[0] if notes else None
    else:
        note = notes_manager.get_note_by_id(id)
    if not note:
        print(f"Note with id '{id}' doesn't exist", file=sys.stderr)
        return 1
    print(f'Note: {note.content!r}')
    answer = input('Are you sure you want to delete this note? [y/N] ').strip().lower()
    if answer in {'y', 'yes'}:
        notes_manager.remove_note(note.id)
    return 0


def main() -> int:
    parser = argparse.ArgumentParser(
        description='For simple notes. Show the last 5 notes when not arguments are provided.'
    )
    group = parser.add_mutually_exclusive_group()
    group.add_argument('-a', '--add', metavar='NOTE', help='add a note')
    group.add_argument(
        '-l',
        '--list',
        metavar='N',
        nargs='?',
        const=0,
        type=int,
        help='show N notes, 0 for showing all notes (default)',
    )
    group.add_argument(
        '-r',
        '--remove',
        metavar='ID',
        nargs='?',
        const=-1,
        type=int,
        help='remove a note by id, remove the last note by default',
    )
    group.add_argument('--migrate', metavar='FILE', help='migrate a .txt file to the database')
    parser.add_argument(
        '--show-id', '--id', action='store_true', help='use with --list to show the id fot each note'
    )
    parser.add_argument(
        '-f', '--full', action='store_true', help='use with --list to show the full content of the note'
    )
    args = parser.parse_args()

    if any((args.show_id, args.full)) and args.list is None:
        parser.error('Cannot use --show-id or --full without --list')

    with NotesManager(XDG_DATA_HOME) as notes_manager:
        if not sys.argv[1:]:
            print_notes(notes_manager.get_last_notes(5))
        elif args.list is not None:
            if args.list < 0:
                parser.error('Negatives values are not allowed')
            elif args.list == 0:
                print_notes(notes_manager.get_all_notes(), args.show_id, args.full)
            else:
                print_notes(notes_manager.get_last_notes(args.list), args.show_id, args.full)
        elif args.add is not None:
            if not args.add.strip():
                parser.error('Adding an empty note is not allowed')
            assert notes_manager.add_note(args.add)
        elif args.migrate:
            total = notes_manager.migrate_file(args.migrate)
            suffix = '' if total == 1 else 's'
            print(f'{parser.prog}: {total} note{suffix} added')
        elif args.remove is not None:
            return delete_note(notes_manager, args.remove)
        else:
            parser.error(f'Undandled arguments: {args}')

    return 0


if __name__ == '__main__':
    sys.exit(main())
